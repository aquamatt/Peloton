<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
            "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
            [
            <!ENTITY peloton "Peloton">
            <!ENTITY tick "<inlinemediaobject><imageobject><imagedata width='4mm' fileref='tick.png' format='PNG'/></imageobject></inlinemediaobject>">
        ]>

<!--
# $Id$
#
# Copyright (c) 2007-2008 ReThought Limited and Peloton Contributors
# All Rights Reserved
# See LICENSE for details
-->

<article>
    <articleinfo>
        <title>
            The
            &peloton; Installation Guide
        </title>
        <author>
            <firstname>Peloton Development Team</firstname>
        </author>
        <releaseinfo>
            $Id$
        </releaseinfo>
        <abstract>
            <para>
                Installation of &peloton; should be straightforward on many platforms
				but there are always occasions when a manual install may be required. This
				document details installation procedures and the packages, libraries and
				applications upon which &peloton; depends.
            </para>
        </abstract>
    </articleinfo>

    <sect1 id='dependencies'>
        <title>Dependencies: 3rd parth apps and libraries</title>
		<sect2>
			<title>Python libraries</title>
			<para>
				The following python libraries are either required always required when using 
				particular modules and must be installed either by installer scripts 
				(distutils, Debian package etc) or by the system administrator. The summary table
				(see <xref linkend='dependency_summary_table'/>)
				details which packages are necessary under what circumstances.
			</para>
			<orderedlist>
	             <listitem>
	                   <para>
	                   	    <filename>Twisted</filename> Version &gt;=8.1.0 obtainable
						   from <ulink url='http://www.twistedmatrix.com'/>. If you have version
						   8.0.1 you <emphasis>must</emphasis> install the newer 8.1.0 as the former 
						   contains a bug in the exception mechanism that will cause &peloton; to fail.
	                   </para>
				 </listitem>
					<listitem>
						<para> Client-side libraries for AMQP. There are few choices in
							this domain at the moment, but the AMQP spec is compelling and
							has a growing backing of heavy-weight sponsors and good
							implementations. Pending the development of a Twisted AMQP
							protocol suite (which is on the todo list for this project) the
							Apache QPID Python libraries are used. Installation requires
							a manual step to install the AMQP specification files; curiously
							the spec that comes with the download is not the correct version.
							Install as follows: </para>
						<itemizedlist>
							<listitem>
								<para> Download and install the Python QPID library (tar file is
									<ulink url='http://archive.apache.org/dist/incubator/qpid/M2-incubating/Python/qpid-1.0-incubating-M2-python-src.tar.gz'/>.
								</para>
							</listitem>
							<listitem>
								<para> Now, in the directory to which 
									<filename>qpid</filename> was installed make a directory
									called <filename>amqp_specs</filename> into
									which you must place the spec file downloaded from
										<ulink
										url='https://jira.amqp.org/confluence/download/attachments/720900/amqp0-8.xml'>
									here</ulink>. Thus if you have <filename>.../site-packages/qpid/</filename>
									you must now also have <filename>.../site-packages/amqp_specs</filename>, for example.
								</para>
							</listitem>
						</itemizedlist>
					</listitem>
				 <listitem>
					 <para>
						 Genshi is the default templating library used for XML and HTML output and it is a
						 requirement to have it. Obtained from <ulink url='http://genshi.edgewall.org/'/> or <filename>easy_intall</filename>able.
						 Ubuntu also have a <filename>python-genshi</filename> package.
					 </para>
				 </listitem>
				 <listitem>
					 <para>
						 &peloton; also supports the Django templating library as an option; simply installing Django into your
						 Python path will enable django templates. This is NOT a required dependency.
					 </para>
				 </listitem>
				 <listitem>
					 <para>
						 PySQLite - the Python library for working with SQLlite which is used by the <code>Backpack</code>
						 storage module.
					 </para>
				 </listitem>
				<listitem>
					<para>
						PyCrypto is the Python cryptography library. Debian/Ubuntu package
						python-crypto is fine otherwise the package may be downloaded from 
						<ulink url='http://sourceforge.net/projects/pycrypto'/>.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>simplejson</code> is a library for serialising too and from JSON
						strings. Debian/Ubuntu users can <code>apt-get install python-simplejson</code>
						whilst the rest can obtain it from 
						<ulink url='http://code.google.com/p/simplejson/'/>.
					</para>
				</listitem>
			</orderedlist>
		</sect2>
		<sect2>
			 <title>Non-Python libraries</title>
			 <para>
				 None thus far.
			 </para>
	    </sect2>
		<sect2>
			 <title>Third party applications</title>
            <orderedlist>
                 <listitem>
                       <para>
                            <filename>RabbitMQ</filename> Version &gt;=1.2.0
                       </para>
					   <para>
					   	   RabbitMQ is a supported messaging backend. MQ servers need
						   to be running in the &peloton; environment and these can
						   be downloaded from the RabbitMQ site at <ulink url='http://www.rabbitmq.com/'/>.
						   Packages are available for many platforms from the RabbitMQ site including 
                           Debian/Ubuntu and Windows -
						   these include or will cause to be installed the Erlang language libraries.
					   </para>
					   <note>
						   <para>
							   Debian/Ubuntu users installing RabbitMQ via the <code>.deb</code> packages
							   are strongly advised to start the server using the <code>init.d</code> script
							   initially. Starting manually requires the appropriate user be set as well as other
							   conditions and can cause confusion. Once familiar with RabbitMQ it's easier
							   to negotiate its setup.
						   </para>
					   </note>
                       <para>
                           Documentation for setting up RabbitMQ can be found on the site. In particular the instructions
                            for clustering must be followed carefully - do not forget to copy the cookie to all hosts. Without
                            this hosts will not cluster together. More information about AMQP, its internals and security
                            model can be obtained from the very readable specification located at
                            <ulink url='https://jira.amqp.org/confluence/display/AMQP/Download'/>.
                       </para>
                 </listitem>
                 <listitem>
                       <para>
                       </para>
                 </listitem>
            </orderedlist>
		</sect2>
		<sect2>
			<title>Installation on Microsoft Windows platforms</title>
			<para>
				Installation on Microsoft Windows is possible but there are a few 
				modifications and extensions required to the codebase to fully support
				the platform. 
			</para>
			<para>
				These changes are being made and a release will be available that works
				with Windows sometime in July 2008.
			</para>
		</sect2>
		<sect2 id='dependency_summary'>
			<title>Dependency summary</title>
			<para>
				The following table summarises all the dependencies for &peloton;. The type
				column indicates what kind of dependency this is: P is a pure python
				library; PB is a Python built-in library (partly or entirely C code); 
				A is an independent application. Versions indicated are those tested by
				the authors and do not imply that other versions of given packages
				will definitely not work.
			</para>
			<para>
				Where a package is defined as required with a tick in brackets - (&tick;) - 
				it may be substituted with another providing identical functionality.
			</para>
			<table  id='dependency_summary_table'>
		      <title>Library and application dependencies</title>
			  <tgroup cols='6'>
                <colspec colwidth='2cm' colname='c1'/>
                <colspec colwidth='1.5cm' colname='c2'/>
                <colspec colwidth='1cm' align='center' colname='c4'/>
                <colspec colwidth='1cm' align='center' colname='c5'/>
                <colspec colwidth='7.5cm' colname='c6'/>
				<colspec colwidth='1.5cm' colname='c7'/>
				<thead>
					<row>
                        <entry>Name</entry>
                        <entry>Version</entry>
						<entry>Type</entry>
                        <entry>Reqd</entry>
                        <entry>Notes</entry>
                        <entry>License</entry>
					</row>
				</thead>
				<tbody>
                    <row>
                        <entry>Twisted</entry>
                        <entry>8.1.0</entry>
						<entry>P/PB</entry>
                        <entry>&tick;</entry>
                        <entry>Python asynchronous networking library</entry>
						<entry>MIT</entry>
                    </row>
                    <row>
                        <entry>SimpleJSON</entry>
                        <entry>1.9.1</entry>
                        <entry>P</entry>
                        <entry>&tick;</entry>
                        <entry>JSON (de)serialisation library</entry>
						<entry>MIT</entry>
                    </row>
                    <row>
                        <entry>RabbitMQ</entry>
                        <entry>1.2.0</entry>
                        <entry>A</entry>
                        <entry>(&tick;)</entry>
                        <entry>AMQP provider; any other provider conformant to the spec may also be used.</entry>
						<entry>MPL</entry>
                    </row>
                    <row>
                        <entry>Python-QPID</entry>
                        <entry>1.0</entry>
                        <entry>P</entry>
                        <entry>&tick;</entry>
                        <entry>AMQP interface library</entry>
						<entry>Apache</entry>
                    </row>
                    <row>
                        <entry>PyCrypto</entry>
                        <entry>2.0.1</entry>
                        <entry>PB</entry>
                        <entry>&tick;</entry>
                        <entry>Python cryptography library</entry>
						<entry>Python</entry>
                    </row>
                    <row>
                        <entry>Genshi</entry>
                        <entry>0.4.4</entry>
                        <entry>P</entry>
                        <entry>&tick;</entry>
                        <entry>Templating engine</entry>
						<entry>BSD</entry>
                    </row>
                    <row>
                        <entry>PySQLite</entry>
                        <entry>2.3.4-2</entry>
                        <entry>PB</entry>
                        <entry>&tick;</entry>
                        <entry>Binding for SQLite</entry>
						<entry>Custom(free)</entry>
                    </row>
                    <row>
                        <entry>SQLite</entry>
                        <entry>3.4.2</entry>
                        <entry>A</entry>
                        <entry>&tick;</entry>
                        <entry>Binding for SQLite</entry>
						<entry>Custom(free)</entry>
                    </row>
				</tbody>
			  </tgroup>
			</table>
	    </sect2>
    </sect1>
	<sect1>
		<title>Running behind Apache2</title>
		<para>
			We do not propose to describe in any depth the configuration of
			Apache, a subject well covered across the web, but note that &peloton;
			works well behind an Apache proxy; indeed it is recommended that &peloton;
			never be exposed directly to the web if possible.
		</para>
		<para>
			Both <code>mod_proxy</code> and <code>mod_rewrite</code> can be used
			to re-direct calls into Peloton. <code>mod_rewrite</code> is particularly
			useful for trapping requests to <code>/static</code> such that they
			are delivered by Apache itself rather than by Peloton via the proxy (this
			is faster).
		</para>
		<sect2>
			<title>Debian/Ubuntu</title>
			<para>
				Ubuntu and Debian are popular platforms in the linux world and have
				the relevant Apache modules ready to use. However, the <filename>proxy.conf</filename>
				file is configured to <code>Deny from all</code> thus ensuring that
				error 403 (forbidden) is returned when you start your proxy. Set this to
				<code>Allow from all</code> to resolve this issue.
			</para>
		</sect2>
	</sect1>
	<sect1>
		<title>The super-quick-start guide</title>
		<para>
			The following should get developers started quickly such that they
			can explore the potential of &peloton;.
		</para>
		<orderedlist>
			<listitem>
				<para>
					Install all the dependencies listed in this document.
				</para>
			</listitem>
			<listitem>
				<para>
					Checkout the trunk to a location we will hence forth refer to
					as <filename>$PELOTON</filename>, or unzip one of the tarballs
					from the Sourceforge project page.
				</para>
			</listitem>
			<listitem>
				<para>
					If using RabbitMQ (see below for details of running without RabbitMQ
					for testing), initialise by running the bash script
					<filename>$PYTHON/bin/initrabbitmq</filename> which creates
					some users, vhosts, realms and permissions.
				</para>
			</listitem>
			<listitem>
				<para>
					Add the following to your PYTHONPATH:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							<filename>$PYTHON/peloton/src</filename>
						</para>
					</listitem>
					<listitem>
						<para>
							<filename>$PYTHON/peloton/src/thirdparty</filename>
						</para>
					</listitem>
					<listitem>
						<para>
							<filename>$PYTHON/peloton/lib</filename>
						</para>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>
					We will now start one Peloton Service Controler (PSC). Many
					PSCs form a domain and each PSC will start workers that actually
					run services. This PSC will use the configuration file in the
					<filename>$PELOTON/example/config</filename> directory named 
					<filename>psc.pcfg</filename> and 
					set a single service path pointing to <filename>$PELOTON/example/service</filename>
					which contains the <filename>TestService</filename>. <code>TestService</code>
					contains a few methods that demonstrate various points and provides a
					handy place to put a little test code of your own.
				</para>
				<para>
					Start as follows:
				</para>
				<informalexample>
					<programlisting> > cd $PELOTON/src/peloton
 > python psc.py -c $PELOTON/example/config/psc.pcfg -s $PELOTON/example/service \
    --nodetach --loglevel=debug 
					</programlisting>
				</informalexample>
				<para>
					The arguments are self-explanatory.
					For further options
					run <filename>python psc.py -h</filename>.
				</para>
				<para>
					Now the PSC is listening to web-based protocol requests
					on port 8080, Twisted RPC request on 9100 and SSH console
					requests on 9110.
				</para>
			</listitem>
			<listitem>
				<para>
					Let's start a service. Open a new console and run:
				</para>
				<informalexample>
					<programlisting>
> ssh -l admin -p 9110 localhost
 [ password is 'admin' ]
>>> start('TestService')											
					</programlisting>
				</informalexample>
				<para>
					You should see log output scroll up the PSC console and the service
					will start. The logging is set to <code>DEBUG</code> so an awful lot
					of messages should appear!
				</para>
			</listitem>
			<listitem>
				<para>
					Now in the <filename>$PELOTON/example/service/testservice/scripts</filename>
					folder you will find scripts to test the service (all are noddy and
					have the hostname to which to connect hard coded at the top of the file).
				</para>
				<para>
					<filename>pecho.py</filename> takes one argument which is sent to the echo
					method on <code>TestService</code> and returned to be displayed.
				</para>
				<para>
					<filename>testpclient.py</filename> takes no arguments and makes n calls
					to the <code>sumint</code> method where n is defined at the head of the
					code. This can be used to test performance and to demonstrate robustness in
					the face of failing nodes.
				</para>
			</listitem>
			<listitem>
				<para>
					Now let's start another node. This is very alpha pre-release so some more
					args required to get over things which will become automagical. You may
					want to start this PSC on another host; if doing so you'll need to make sure
					the <code>messagingHost</code> is set to the IP address of your messaging
					host in <filename>$PELOTON/example/config/grid.pcfg</filename>.
				</para>
				<para>
					Start the second and subsequent PSCs as follows (the extra
					flags only required if this is the second PSC on a given host
					otherwise you may use the same incantation as before):
				</para>
				<informalexample>
					<programlisting>
> cd $PELOTON/src/peloton
> python psc.py -c $PELOTON/example/config/psc.pcfg -s $PELOTON/example/service \
    --nodetach --loglevel=debug --flags=BAMBI
    --disable=shell # ONLY IF ANOTHER PSC IS RUNNING
    --anyport       # ONLY IF ANOTHER PSC IS RUNNING
					</programlisting>
				</informalexample>
			</listitem>
			<listitem>
				<para>
					Now from the SSH console you can again issue a
					<code>start('TestService')</code> and you will see
					the service start on all nodes. You can control what nodes
					run a given service by altering the service profile and, for example,
					asserting that it should run only on nodes that have certain flags. 
					The TestService will NOT run on a node that has the <code>IGNORE</code>
					flag set; start a node with <code>--flags=IGNORE</code>, request that 
					<code>TestService</code> be started and see the result.
				</para>
			</listitem>
			<listitem>
				<para>
					Finally, to create a new service all of your very own you
					can use the handy <filename>newservice.py</filename> tool
					found in <filename>$PELOTON/src/tools/</filename>. Change
					to <filename>$PELOTON/example/service</filename> and run:
				</para>
				<informalexample>
					<programlisting>
> ../../src/tools/newservice.py -s MyService
					</programlisting>
				</informalexample>
				<para>
					A new directory called <filename>myservice</filename> is made
					and populated with an empty service. Simply edit 
					<filename>myservice.py</filename> to get started. You can immediately
					start the service from the console with <code>start('MyService')</code>.
				</para>
			</listitem>
		</orderedlist>
	</sect1>
	<sect1>
		<title>Running without RabbitMQ</title>
		<para>
			Strictly for the purpose of evaluation and quick testing there is a &peloton;
			kernel plugin named PseudoMQ which provides a message bus implemented entirely
			within &peloton;. It is suitable for most testing but does not always behave exactly
			as its grown-up counterpart; for example, messages may not be received in the
			order they were sent. 
		</para>
		<para>
			Within these limits, PseudoMQ is a practical way to test &peloton; without installing
			RabbitMQ. It is not a completely de-centralised system, there is one node named the master
			and the system will not recover from the death of a master (remember: this is quick'n'dirty,
			not production code, not even development environment code!) To start the master:
		</para>
		<informalexample>
			<programlisting>
> cd $PELOTON/src/peloton
> python psc.py --disable=amqp-qpid --enable=pseudomq 
				--flags=mqserver 
				[... plus remaining args]</programlisting>
		</informalexample>
		<para>
			All non-server nodes must be started as:
		</para>
		<informalexample>
			<programlisting>
> cd $PELOTON/src/peloton
> python psc.py --disable=amqp-qpid --enable=pseudomq 
				[... plus remaining args]</programlisting>
		</informalexample>
		<para>
			For interest, the configuration of plugins is set in 
			the PSC configuration file in
			the <filename>example/config/psc.pcfg</filename>.
		</para>
	</sect1>
</article>

